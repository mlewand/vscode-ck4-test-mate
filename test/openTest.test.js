/* global suite, test */

const assert = require( 'assert' ),
	vscode = require( 'vscode' ),
	openTest = require( '../openTest' );

suite( 'openTest command', () => {
	let cases = [
		// entries format: [ expected, actual, message ],
		[ 'http://tests.ckeditor.test:1030/tests/plugins/pastefromword/lists', '/home/john/dev/ckeditor-dev/tests/plugins/pastefromword/lists.js', 'Wrong ret for Linux path' ],
		[ 'http://tests.ckeditor.test:1030/tests/plugins/pastefromword/lists', '/c:/dev/ckeditor-dev/tests/plugins/pastefromword/lists.js', 'Wrong ret for Windows path' ],
		// Markdown file should result with the same link.
		[ 'http://tests.ckeditor.test:1030/tests/plugins/pastefromword/lists', '/c:/dev/ckeditor-dev/tests/plugins/pastefromword/lists.md', 'Wrong ret for Windows path' ],
		// HTML file should result with the same link.
		[ 'http://tests.ckeditor.test:1030/tests/plugins/pastefromword/lists', '/c:/dev/ckeditor-dev/tests/plugins/pastefromword/lists.html', 'Wrong ret for Windows path' ],
		// This directory is not a test file.
		[ false, '/c:/my/path/foo.js', 'Wrong ret for wrong directory' ],
		// This path contains testFoo directory, it should be recognized as a wrong path.
		[ false, '/c:/my/testsFoo/foo.js', 'Wrong ret for wrong directory' ],
		// Different file just to be sure.
		[ 'http://tests.ckeditor.test:1030/tests/foo', '/c:/dev/ckeditor-dev/tests/foo.js', 'Wrong return value for different file' ]
	];

	for ( let vals of cases ) {
		test( 'pathToUrl return value ' + vals[ 1 ], () => {
			assert.equal( openTest.pathToUrl( vals[ 1 ] ), vals[ 0 ], vals[ 2 ] );
		} );
	}

	suite( 'Is configurable', () => {
		const CONFIGURATION_GLOBAL = vscode.ConfigurationTarget.Global;

		suiteSetup( () => {
			return Promise.all( [
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'domain', 'tests.ckeditor.dev', CONFIGURATION_GLOBAL ),
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'protocol', 'https', CONFIGURATION_GLOBAL ),
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'port', 10470, CONFIGURATION_GLOBAL )
			] );
		} );

		suiteTeardown( () => {
			// Restore original values.
			return Promise.all( [
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'domain', undefined, CONFIGURATION_GLOBAL ),
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'protocol', undefined, CONFIGURATION_GLOBAL ),
				vscode.workspace.getConfiguration( 'ck4-test-mate' ).update( 'port', undefined, CONFIGURATION_GLOBAL )
			] );
		} );

		test( 'Supports configurability', () => {
			assert.equal( openTest.pathToUrl( '/c:/dev/ckeditor-dev/tests/foo.js' ), 'https://tests.ckeditor.dev:10470/tests/foo' );
		} );
	} );
} );